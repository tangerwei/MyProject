react
当渲染的元素是一个数组比如:
var array = ["概论","文档","新闻","VIEW ON GITHUB"];
var arrayData = [];
for (var i = 0;i<array.length;i++){
  arrayData[i] = <li key={i} onClick={this.selectTag.bind(this,{i})} className={this.state.linkstate[i]}><a href ={link_no}>{array[i]}</a></li>
}
看上面有一个key属性
当需要渲染的元素是一个数组，那么数组里面的子元素必须有一个唯一的key属性，确保虚拟dom的遍历

元素浮动导致父元素的高度塌陷，对需要放在父元素下面的元素使用clear:both限制需要布局元素的位置即可


按照原来的思路
父组件通过props传递值给子组件1完成初始化，那么子组件1在和用户交互的过程中怎么将变化传递给父组件？
可以通过props，因为props中包含父组件所有的属性访问，那么如果在父组件中添加一个相应的函数change，一旦子组件1
触发change事件，就在change函数内部设置state从而达到刷新整个页面的效果=>这也是子组件1和子组件2通信的方式之一


react的state相当有意思，如果在某个组件中state的值发生变化，是会造成相关组件的重新渲染，但是相关组件的定义却
相当值得思考，举个例子，倘若存在父组件和子组件1，那么如果子组件1的渲染中有一个值是通过父组件的state传过来的
但是由于是两个组件，那么在子组件内部是无法只能通过props的传递才能拿到这个值。这里就导致子组件使用的相关值
其实适合state分开的，那么如果父组件更新state，子组件同样不会变化，问题就产生了，怎么将父组件的state更新
反映到子组件上呢？方式1：直接通过refs，手动调用子组件的方法更新state。如果父组件的更新本身就是子组件的更新导致的
那么还可以在组件更新的同时刷新state，然后再通过props调用父组件的方法刷新父组件的state。
但是这里还是推荐使用直接更新父组件，然后由父组件的更新自动绑定刷新子组件state，自上而下。